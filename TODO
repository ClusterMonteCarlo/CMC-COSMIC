***********************************************************
*** things that _have_ to be done, in order of priority ***
***********************************************************

* Remove the code for sub timesteps, since they don't work anymore
  with the new relaxation.
* Predictor-corrector for phi?
* Fix FITS routines, which are severely out of date with recent changes. Make
  sure snapshotting works, in particular with binaries. This will form basis
  of FITS programs that will create binaries for initial conditions.

*************************************************************
*** things that would be nice to do, in order of priority ***
*************************************************************

* Resurrect binary interaction logging.
* Keep triples?  This should be easier to do now that the dynamical
  interaction part of the code has been generalized.
* Perhaps automate writing of snapshotting routines?  This could be done with,
  e.g., a Perl script that catalogs all global variables, then writes the 
  routines to dump them to a FITS file.
* Decouple the potential from the star structure.  They are physically
  different things, and the fact that they're tied together has caused
  significant problems already.  We just need a quickly searchable array
  containing (radius, potential) pairs.
* Set criterion for stopping calculation based on tstop in code and physical
  units.
* Create much better system for setting physical units in the input file.
  Perhaps it should be that the input FITS files are minimal representations
  of N-body systems, in N-body units, and everything else is set in the input
  file?  No, this fails when binaries are added to the input FITS file.
  Physical units are a necessary part of this file once all scales are (over-)
  specified.  Need utilities for modifying properties of input FITS files:
  fits_add_binaries, fits_set_scales, etc.
* Rewrite get_positions().  Can solve dQ/dr=0 to get r at v_r,max, which can be
  used to bisect the r interval into two portions, each containing a root of
  Q(r)=0.  This is what the force_t variable type is for.
* Write test suite that, e.g., makes sure the code compiles, then makes sure
  t_cc for a single-component Plummer model is about 15 t_rh.
